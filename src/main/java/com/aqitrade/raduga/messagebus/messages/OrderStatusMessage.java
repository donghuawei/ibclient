/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.aqitrade.raduga.messagebus.messages;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class OrderStatusMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OrderStatusMessage\",\"namespace\":\"com.aqitrade.raduga.messagebus.messages\",\"fields\":[{\"name\":\"orderID\",\"type\":\"long\"},{\"name\":\"exchangeOrderID\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"qty\",\"type\":\"int\"},{\"name\":\"status\",\"type\":{\"type\":\"enum\",\"name\":\"OrderStatus\",\"symbols\":[\"order_status_new\",\"order_status_cancel_submitted\",\"order_status_executed\",\"order_status_rejected\",\"order_status_cancelled\"]}},{\"name\":\"statusMessage\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"createDate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long orderID;
  @Deprecated public String exchangeOrderID;
  @Deprecated public int qty;
  @Deprecated public OrderStatus status;
  @Deprecated public String statusMessage;
  @Deprecated public String createDate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}.
   */
  public OrderStatusMessage() {}

  /**
   * All-args constructor.
   */
  public OrderStatusMessage(Long orderID, String exchangeOrderID, Integer qty, OrderStatus status, String statusMessage, String createDate) {
    this.orderID = orderID;
    this.exchangeOrderID = exchangeOrderID;
    this.qty = qty;
    this.status = status;
    this.statusMessage = statusMessage;
    this.createDate = createDate;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return orderID;
    case 1: return exchangeOrderID;
    case 2: return qty;
    case 3: return status;
    case 4: return statusMessage;
    case 5: return createDate;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: orderID = (Long)value$; break;
    case 1: exchangeOrderID = (String)value$; break;
    case 2: qty = (Integer)value$; break;
    case 3: status = (OrderStatus)value$; break;
    case 4: statusMessage = (String)value$; break;
    case 5: createDate = (String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'orderID' field.
   */
  public Long getOrderID() {
    return orderID;
  }

  /**
   * Sets the value of the 'orderID' field.
   * @param value the value to set.
   */
  public void setOrderID(Long value) {
    this.orderID = value;
  }

  /**
   * Gets the value of the 'exchangeOrderID' field.
   */
  public String getExchangeOrderID() {
    return exchangeOrderID;
  }

  /**
   * Sets the value of the 'exchangeOrderID' field.
   * @param value the value to set.
   */
  public void setExchangeOrderID(String value) {
    this.exchangeOrderID = value;
  }

  /**
   * Gets the value of the 'qty' field.
   */
  public Integer getQty() {
    return qty;
  }

  /**
   * Sets the value of the 'qty' field.
   * @param value the value to set.
   */
  public void setQty(Integer value) {
    this.qty = value;
  }

  /**
   * Gets the value of the 'status' field.
   */
  public OrderStatus getStatus() {
    return status;
  }

  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(OrderStatus value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'statusMessage' field.
   */
  public String getStatusMessage() {
    return statusMessage;
  }

  /**
   * Sets the value of the 'statusMessage' field.
   * @param value the value to set.
   */
  public void setStatusMessage(String value) {
    this.statusMessage = value;
  }

  /**
   * Gets the value of the 'createDate' field.
   */
  public String getCreateDate() {
    return createDate;
  }

  /**
   * Sets the value of the 'createDate' field.
   * @param value the value to set.
   */
  public void setCreateDate(String value) {
    this.createDate = value;
  }

  /** Creates a new OrderStatusMessage RecordBuilder */
  public static Builder newBuilder() {
    return new Builder();
  }

  /** Creates a new OrderStatusMessage RecordBuilder by copying an existing Builder */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /** Creates a new OrderStatusMessage RecordBuilder by copying an existing OrderStatusMessage instance */
  public static Builder newBuilder(OrderStatusMessage other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for OrderStatusMessage instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OrderStatusMessage>
    implements org.apache.avro.data.RecordBuilder<OrderStatusMessage> {

    private long orderID;
    private String exchangeOrderID;
    private int qty;
    private OrderStatus status;
    private String statusMessage;
    private String createDate;

    /** Creates a new Builder */
    private Builder() {
      super(OrderStatusMessage.SCHEMA$);
    }

    /** Creates a Builder by copying an existing Builder */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.orderID)) {
        this.orderID = data().deepCopy(fields()[0].schema(), other.orderID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.exchangeOrderID)) {
        this.exchangeOrderID = data().deepCopy(fields()[1].schema(), other.exchangeOrderID);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.qty)) {
        this.qty = data().deepCopy(fields()[2].schema(), other.qty);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.status)) {
        this.status = data().deepCopy(fields()[3].schema(), other.status);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.statusMessage)) {
        this.statusMessage = data().deepCopy(fields()[4].schema(), other.statusMessage);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.createDate)) {
        this.createDate = data().deepCopy(fields()[5].schema(), other.createDate);
        fieldSetFlags()[5] = true;
      }
    }

    /** Creates a Builder by copying an existing OrderStatusMessage instance */
    private Builder(OrderStatusMessage other) {
            super(OrderStatusMessage.SCHEMA$);
      if (isValidValue(fields()[0], other.orderID)) {
        this.orderID = data().deepCopy(fields()[0].schema(), other.orderID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.exchangeOrderID)) {
        this.exchangeOrderID = data().deepCopy(fields()[1].schema(), other.exchangeOrderID);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.qty)) {
        this.qty = data().deepCopy(fields()[2].schema(), other.qty);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.status)) {
        this.status = data().deepCopy(fields()[3].schema(), other.status);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.statusMessage)) {
        this.statusMessage = data().deepCopy(fields()[4].schema(), other.statusMessage);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.createDate)) {
        this.createDate = data().deepCopy(fields()[5].schema(), other.createDate);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'orderID' field */
    public Long getOrderID() {
      return orderID;
    }

    /** Sets the value of the 'orderID' field */
    public Builder setOrderID(long value) {
      validate(fields()[0], value);
      this.orderID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /** Checks whether the 'orderID' field has been set */
    public boolean hasOrderID() {
      return fieldSetFlags()[0];
    }

    /** Clears the value of the 'orderID' field */
    public Builder clearOrderID() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'exchangeOrderID' field */
    public String getExchangeOrderID() {
      return exchangeOrderID;
    }

    /** Sets the value of the 'exchangeOrderID' field */
    public Builder setExchangeOrderID(String value) {
      validate(fields()[1], value);
      this.exchangeOrderID = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /** Checks whether the 'exchangeOrderID' field has been set */
    public boolean hasExchangeOrderID() {
      return fieldSetFlags()[1];
    }

    /** Clears the value of the 'exchangeOrderID' field */
    public Builder clearExchangeOrderID() {
      exchangeOrderID = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'qty' field */
    public Integer getQty() {
      return qty;
    }

    /** Sets the value of the 'qty' field */
    public Builder setQty(int value) {
      validate(fields()[2], value);
      this.qty = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /** Checks whether the 'qty' field has been set */
    public boolean hasQty() {
      return fieldSetFlags()[2];
    }

    /** Clears the value of the 'qty' field */
    public Builder clearQty() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'status' field */
    public OrderStatus getStatus() {
      return status;
    }

    /** Sets the value of the 'status' field */
    public Builder setStatus(OrderStatus value) {
      validate(fields()[3], value);
      this.status = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /** Checks whether the 'status' field has been set */
    public boolean hasStatus() {
      return fieldSetFlags()[3];
    }

    /** Clears the value of the 'status' field */
    public Builder clearStatus() {
      status = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'statusMessage' field */
    public String getStatusMessage() {
      return statusMessage;
    }

    /** Sets the value of the 'statusMessage' field */
    public Builder setStatusMessage(String value) {
      validate(fields()[4], value);
      this.statusMessage = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /** Checks whether the 'statusMessage' field has been set */
    public boolean hasStatusMessage() {
      return fieldSetFlags()[4];
    }

    /** Clears the value of the 'statusMessage' field */
    public Builder clearStatusMessage() {
      statusMessage = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'createDate' field */
    public String getCreateDate() {
      return createDate;
    }

    /** Sets the value of the 'createDate' field */
    public Builder setCreateDate(String value) {
      validate(fields()[5], value);
      this.createDate = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /** Checks whether the 'createDate' field has been set */
    public boolean hasCreateDate() {
      return fieldSetFlags()[5];
    }

    /** Clears the value of the 'createDate' field */
    public Builder clearCreateDate() {
      createDate = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public OrderStatusMessage build() {
      try {
        OrderStatusMessage record = new OrderStatusMessage();
        record.orderID = fieldSetFlags()[0] ? this.orderID : (Long) defaultValue(fields()[0]);
        record.exchangeOrderID = fieldSetFlags()[1] ? this.exchangeOrderID : (String) defaultValue(fields()[1]);
        record.qty = fieldSetFlags()[2] ? this.qty : (Integer) defaultValue(fields()[2]);
        record.status = fieldSetFlags()[3] ? this.status : (OrderStatus) defaultValue(fields()[3]);
        record.statusMessage = fieldSetFlags()[4] ? this.statusMessage : (String) defaultValue(fields()[4]);
        record.createDate = fieldSetFlags()[5] ? this.createDate : (String) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
